#include <iostream>
using namespace std;

const int MAX_SIZE = 100; // maximum size of the stack

class Stack {
private:
    int arr[MAX_SIZE];
    int top; // index of the top element in the stack
public:
    Stack() {
        top = -1; // initialize the stack to be empty
    }
    void push(int x) {
        if (top >= MAX_SIZE - 1) { // check for stack overflow
            cout << "Stack overflow!" << endl;
            return;
        }
        top++;
        arr[top] = x; // insert the element at the top
        cout << "Push (" << x << ")"<< endl;
        printStack();
    }
    void pop() {
        if (top < 0) { // check for stack underflow
            cout << "Stack underflow!" << endl;
            return;
        }
        int popped = arr[top];
        top--;
        cout << "Pop( " << popped << ")" << endl;
        printStack();
    }
    int stackTop() {
        if (top < 0) { // check for stack underflow
            cout << "Stack is empty!" << endl;
            return -1;
        }
        return arr[top]; // return the top element
    }
    bool isEmpty() {
        return (top < 0); // check if the stack is empty
    }
    bool isFull() {
        return (top >= MAX_SIZE - 1); // check if the stack is full
    }
    void display() {
        if (top < 0) { // check for stack underflow
            cout << "Stack is empty!" << endl;
            return;
        }
        cout << "Stack elements:" << endl;
        for (int i = top; i >= 0; i--) {
            cout << arr[i] << endl;
        }
    }
    void printStack() {
        if (top < 0) {
            cout << "Stack is empty!" << endl;
        } else {
            cout << "                                  [";
            for (int i = 0; i <= top; i++) {
                cout << arr[i];
                if (i != top) {
                    cout << ", ";
                }
            }
            cout << "]" << endl;
        }
    }
};

int main() {
    Stack s;
    s.push(5);
    s.push(10);
    s.push(15);
    s.pop();
    s.pop();
    s.pop();
    s.isFull();
    return 0;
}
